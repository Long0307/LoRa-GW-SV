/******************************************************************************
* Filename     : loramac.h                                                    *
* Program      : Private LoRa Network Server Program                          *
* Copyright    : Copyright (C) 2017-2017, ETRI                                *
*              : URL << http://www.etri.re.kr >>                              *
* Authors      : Woo-Sung Jung (woosung@etri.re.kr)                           *
*              : Tae Hyun Yoon (thyoon0820@etri.re.kr)                        *
*              : Dae Seung Yoo (ooseyds@etri.re.kr)                           *
* Description  : Private LoRa End Device class X MAC routine                  *
* Created at   : Mon Mar 27 2017.                                             *
* Modified by  :                                                              *
* Modified at  :                                                              *
******************************************************************************/

#ifndef __LORA_MAC_H
#define __LORA_MAC_H

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "forwarder.h"
//#include "conf.h"
#define BUFFER_SIZE			256
// Value from UWB Frame
#define START_OF_FRAME			0xDE
#define END_OF_FRAME			0xCA

#define BITSET				1
#define BITUNSET			0
//#define TUNNELING_OVERHEAD		10
#define LORA_OVERHEAD	13	// 9 + 4

#define LORAWAN_R1			0


/*!
 * IEEE Organizationally Unique Identifier ( OUI ) (big endian)
 * \remark This is unique to a company or organization
 */
#define IEEE_OUI                                     0x01, 0x00, 0x00 

/*!
 * Mote device IEEE EUI (big endian)
 *
 * \remark In this application the value is automatically generated by calling
 *         BoardGetUniqueId function
 */
#define LORAWAN_DEVICE_EUI                          { IEEE_OUI, 0xFF, 0xFF, 0x00, 0x00, 0x03 }

/*!
 * Application IEEE EUI (big endian)
 */
//#define LORAWAN_APPLICATION_EUI                     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03 }
#define LORAWAN_APPLICATION_EUI                     { 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00 }

/*!
 * AES encryption/decryption cipher application key
 */
//#define LORAWAN_APPLICATION_KEY                     { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C }
#define LORAWAN_APPLICATION_KEY                     { 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67 }


#define Nwk_ID										0x0001	// [31..25]
#define Nwk_Addr									0x0000001	// [24..00]

/*!
 * Current network ID
 */
#define LORAWAN_NETWORK_ID                          ( uint32_t )0x00000001


#define LORAWAN_DEVICE_ADDRESS                      ( uint32_t )0x00000123

/*!
 * AES encryption/decryption cipher network session key
 */
//#define LORAWAN_NWKSKEY		{ 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C }
#define LORAWAN_NWKSKEY		{ 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF }

/*!
 * AES encryption/decryption cipher application session key
 */
//#define LORAWAN_APPSKEY		{ 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C }
#define LORAWAN_APPSKEY		{ 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10 }


/******************************************************************************
* Function Name        : LoRaMAC_Init
* Input Parameters     : None
* Return Value         : None
* Function Description : LoRa MAC Initialization routine
******************************************************************************/
void LoRaMAC_Init(void);

/******************************************************************************
* Function Name        : ReceiveFrameFromLoRaGW
* Input Parameters     : uint8_t *rxFrame - Received Frame Data
*                      : int size         - Received Frame Size
*                      : int gwSocket     - Received GW socket
* Return Value         : None
* Function Description : Receive LoRa Frame from Gateway
******************************************************************************/
void ReceiveFrameFromLoRaGW(uint8_t *rxFrame, int size, int gwSocket);

/******************************************************************************
* Function Name        : NetworkServerReceiveFrame
* Input Parameters     : Rx Frame
*                      : GateWay Socket
* Return Value         : None
* Function Description : When LoRa MAC status change to RX,
*                      : LoRaMacStatusUpdate calls it.
*                      : It can handle both gateway and end device.
******************************************************************************/
void NetworkServerReceiveFrame(uint8_t *rxFrameBufferi, int gwSocket);

/******************************************************************************
* Function Name        : SendJoinAcceptFrame
* Input Parameters     : int gwSocket          - Gateway Socket
*                      : int32_t deviceAddress - EndDevice Address
* Return Value         : None
* Function Description : Join Response
******************************************************************************/
void SendJoinAcceptFrame(int gwSocket, uint32_t deviceAddress);

/******************************************************************************
* Function Name        : SendFrame
* Input Parameters     : uint8_t *buffer   - Application payload
*                      : uint8_t size      - Application Size
*                      : uint8_t port      - LoRa Frame Port
*                      :                     Port = 0 (Only MAC command)
*                      :                     Port = 1..223 (Application Specific)
*                      :                     Port = 224 (LoRaWAN Test Protocol)
*                      : uint8_t ack_req   - Confirmed data(1) or Unconfirmed data(0)
*                      : uint8_t direction - UpLink (0) or DownLink (1)
*                      : uint32_t nwkAddr  - Target Device Network Address 
*                      : uint32_t nwkID    - Target Device Network ID
* Return Value         : uint32_t          - Transmitted Data Byte
* Function Description : Generate LoRa MAC Frame and Send it
******************************************************************************/
uint32_t SendFrame(uint8_t *buffer, uint8_t size, uint8_t port, uint8_t ack_req, uint8_t direction, uint32_t nwkAddr, uint32_t nwkID);


typedef struct LoRaMacStatus {
	uint8_t Joined;				// 1 - Joined / 0 - others
	uint8_t ADRACKRequested;	// 1 - Network server Request ADRACK / 0 - others
	uint8_t ACKRequested;		// 1 - Network server Request ACK / 0 - others
	uint8_t FPending;			// 1 - more data is waiting.. / 0 - no more data
	uint8_t ADR;
}LoRaMacStatus_t;

typedef enum LoRaMacStatusType {
	LoRa_MAC_NotJoined		= 0x00,
	LoRa_MAC_Joined			= 0x01,
}LoRaMacStatusType_t;

typedef enum LoRaMacStatusADR {
	LoRa_MAC_ADR_DEVICE	= 0x00,
	LoRa_MAC_ADR_NETWORK= 0x01,
}LoRaMacStatusADR_t;

typedef enum LoRaMacStatusADRACKReq {
	LoRa_MAC_ADRACK_Not_Request= 0x00,
	LoRa_MAC_ADRACK_Requested	= 0x01,
}LoRaMacStatusADRACKReq_t;

typedef enum LoRaMacStatusACKReq {
	LoRa_MAC_ACK_Not_Request= 0x00,
	LoRa_MAC_ACK_Requested	= 0x01,
}LoRaMacStatusACKReq_t;

typedef enum LoRaMacStatusFPending {
	LoRa_MAC_NO_PENDING = 0x00,
	LoRa_MAC_PENDING	= 0x01,
}LoRaMacStatusFPending_t;

typedef enum LoRaDirection {
	LoRa_UP_LINK			= 0x00,
	LoRa_DN_LINK			= 0x01,
}LoRaDirection_t;

typedef union LoRaMACHeader {
	uint8_t value;
	struct LoRaMACHeader_value{
	uint8_t Major	: 2;
	uint8_t RFU		: 3;
	uint8_t MType	: 3;
	}bits;
}LoRaMACHeader_t;

typedef union LoRaFrameControlDown {
	uint8_t value;
	struct LoRaFrameControlDown_value{
		uint8_t FOptsLen	: 4;
		uint8_t FPending	: 1;
		uint8_t ACK			: 1;
		uint8_t RFU			: 1;
		uint8_t ADR			: 1;
	}bits;
}LoRaFrameControlDown_t;

typedef union LoRaFrameControlUp {
	uint8_t value;
	struct LoRaFrameControlUp_value{
		uint8_t FOptsLen	: 4;
		uint8_t RFU			: 1;
		uint8_t ACK			: 1;
		uint8_t ADRACKReq	: 1;
		uint8_t ADR			: 1;
	}bits;
}LoRaFrameControlUp_t;

typedef struct LoRaDevAddr {
	uint32_t NwkAddr	: 25;
	uint32_t NwkID 		: 7;
}LoRaDevAddr_t;

typedef struct LoRaFrameHeader {
	union {
		uint32_t Address;
		LoRaDevAddr_t Bit;
	}DevAddr;
	union {
		LoRaFrameControlDown_t dn;
		LoRaFrameControlUp_t up;
	}FCtrl;
	// FCnt;
	uint16_t FrameCounter;

}LoRaFrameHeader_t;

typedef struct LoRaJoinReqMsg {
	uint8_t AppEUI[8];
	uint8_t DevEUI[8];
	uint8_t DevNonce[2];
}LoRaJoinReqMsg_t;

typedef union LoRaDLSetting {
	uint8_t value;
	struct LoRaDLSetting_value{
		uint8_t Rx2DR		: 4;
		uint8_t Rx1DRoff	: 3;
		uint8_t RFU			: 1;
	}bits;
}LoRaDLSetting_t;

typedef struct LoRaJoinAcceptMsg {
	uint8_t AppNonce[3];
	uint8_t NetID[3];
	uint8_t DevAddr[4];
	LoRaDLSetting_t DLSetting;
	uint8_t RxDelay;
}LoRaJoinAcceptMsg_t;

// Chapter 4.2.1 Message Type (MType bit field)
typedef enum LoRaMACFrameType{
	LoRa_Frame_Join_Request			= 0x00,
	LoRa_Frame_Join_Accept			= 0x01,
	LoRa_Frame_Unconfirm_Data_Up	= 0x02,
	LoRa_Frame_Unconfirm_Data_Down	= 0x03,
	LoRa_Frame_Confirm_Data_Up		= 0x04,
	LoRa_Frame_Confirm_Data_Down	= 0x05,
	LoRa_Frame_RFU					= 0x06,
	LoRa_Frame_Proprietary			= 0x07,
}LoRaMACFrameType_t;

// Chapter 4.2.2 Major version of data message (Major bit field)
typedef enum LoRaMACMajorVersion{
	LoRa_MAC_LoRaWAN_R1				= 0x00,
	LoRa_MAC_RFU					= 0x01,
}LoRaMACMajorVersion_t;

// Chapter 5 MAC Commands
typedef enum LoRaMACCommandEndDevice {
	LoRa_MAC_CMD_LinkCheckReq		= 0x02,
	LoRa_MAC_CMD_LinkADRAns			= 0x03,
	LoRa_MAC_CMD_DutyCycleAns		= 0x04,
	LoRa_MAC_CMD_RxParamSetupAns	= 0x05,
	LoRa_MAC_CMD_DevStatusAns		= 0x06,
	LoRa_MAC_CMD_NewChannelAns		= 0x07,
	LoRa_MAC_CMD_RxTimingSetupAns	= 0x08,
	LoRa_MAC_CMD_TxParamSetupAns	= 0x09,
	LoRa_MAC_CMD_DIChannelAns		= 0x0A,
}LoRaMACCommandEndDevice_t;

typedef enum LoRaMACCommandGW {
	LoRa_MAC_CMD_LinkCheckAns		= 0x02,
	LoRa_MAC_CMD_LinkADRReq			= 0x03,
	LoRa_MAC_CMD_DutyCycleReq		= 0x04,
	LoRa_MAC_CMD_RxParamSetupReq	= 0x05,
	LoRa_MAC_CMD_DevStatusReq		= 0x06,
	LoRa_MAC_CMD_NewChannelReq		= 0x07,
	LoRa_MAC_CMD_RxTimingSetupReq	= 0x08,
	LoRa_MAC_CMD_TxParamSetupReq	= 0x09,
	LoRa_MAC_CMD_DIChannelReq		= 0x0A,
}LoRaMACCommandGW_t;

/*
typedef struct LoRaRxFrameInfo{
	uint8_t startOfFrame;
	uint8_t frameSize;
	int16_t rssi;
	int8_t snr;
	uint8_t cr;
	uint8_t sf;
	uint32_t ch;
	uint8_t appPayloadSize;
	uint8_t startOfAppPayload;
	uint8_t payload[BUFFER_SIZE];
	uint8_t endOfFrame;
}LoRaRxFrameInfo_t;

typedef struct LoRaTxFrameInfo{
	uint8_t startOfFrame;
	uint8_t frameSize;
	uint8_t cr;
	uint8_t sf;
	uint32_t ch;
	uint8_t appPayloadSize;
	uint8_t startOfAppPayload;
	uint8_t payload[BUFFER_SIZE];
	uint8_t endOfFrame;
}LoRaTxFrameInfo_t;
*/

#endif	// __LORA_MAC_H
